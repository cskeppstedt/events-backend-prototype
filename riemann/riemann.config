; -*- mode: clojure; -*-
; vim: filetype=clojure

(use '[clojure.string :only (join)])
(use '[clojure.math.numeric-tower :only (abs)])
(logging/init {:file "/var/log/riemann/riemann.log"})

(def graph (graphite {:host "grafana_graphite" :port 2003}))

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(let [index (index)]
  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 30
      ; Index all events immediately.
      index

      ; Log expired events.
      (expired
        (fn [event] (info "expired" event))))))

(kafka-consumer {:consumer.config {:bootstrap.servers "kafka:9092"
                                   :group.id "test"}
                 :topics ["events"]})

(defn set-host-and-ttl [incoming-event]
  (assoc incoming-event :host (join "_" [(:host incoming-event) (:sid incoming-event) (:iid incoming-event)]) :ttl 10 :metric 42))

; adds "_count" at the end of the service name
(defn rename-count [ev]
  (assoc ev :service (join "_" [(:service ev) "count"])))

; copies the "timestamp" property to the "metric" property
(defn timestamp-as-metric [ev]
  (assoc ev :metric (:timestamp ev)))

(streams
  ; calculate time difference between created/loaded events
  (by [:sid :iid]
    (smap timestamp-as-metric
      (project [(service "frontend-events/main_iframe_created")
                (service "frontend-events/main_iframe_loaded")]
        (smap folds/difference (with :service "frontend-events/main_iframe_created_to_loaded"
                                  graph)))))

  ; count the occurrences of the distinct events
  (tagged "frontend-events"
    (by [:host :service]
      (smap rename-count
        (moving-time-window 60
          (smap folds/count graph))))))

; -----------------------------
; event names
; -----------------------------
; fullscreen_iframe_loaded
; fullscreen_iframe_created
; fullscreen_iframe_timed_out
; main_iframe_created
; main_iframe_loaded
; main_iframe_visible
; main_iframe_timed_out
; dr_iframe_loaded
; dr_iframe_created
; dr_iframe_timed_out

; (streams
;   graph
;   #(info %))

